---
created_at: 2011-04-27
excerpt: Il file Rules è la componente principale di un blog generato con nanoc. Usiamo il file Rules di questo blog come caso di studio, non esaustivo ovviamente.
kind: article
publish: true
lang: [it]
tags: [how-to, nanoc, ruby]
title: "Serve codice server side per un blog? Parte 2 - Il file Rules"
place: Gessate
---

%p
  La 
  %a{:href=>'/2011/04/20/serve_codice_server_side_per_un_blog_parte_1.html'}scorsa
  puntata abbiamo utilizzato nanoc per creare lo scheletro di un nostro
  ipotetico blog. Il file Rules è forse la componente più importante in quanto
  dice a nanoc come processare i file di contenuto al momento della generazione
  dell'html.
%p
  Analizzeremo il file Rules che ho scritto per questo blog, quindi le convenzioni che useremo saranno:
  %ul
    %li useremo HAML per il markup dei contenuti
    %li useremo coderay per l'highlight della sintassi del codice
    %li avremo una directory static nella root del nostro blog dove memorizzeremo i fogli di stile, i file javascript e le immagini
%p
  Il file Rules non è altro che un file Ruby contenente blocchi condizionali
  che dicono quali filtri devono essere applicati ai file processati come
  contenuto e come costruire i percorsi dei nostri file statici.
  %br
  All'inizio del nostro file andremo a definire alcune attività di
  preprocessing all'atto della compilazione del nostro sito. In particolare
  vogliamo eliminare tutti i contenuti il cui attributo publish è false in modo
  da eventualmente depubblicare un post o un articolo.
  %br
  Successivamente vogliamo copiare nella cartella output i nostri asset statici
  (js, css ed immagini), creare le pagine che ordinano i nostri contenuti per
  tag ed aggiornare alcuni attributi dei nostri file.
  %pre
    %code{:class=>'language-ruby coderay'}
      preprocess do
      items.delete_if { |item| item[:publish] == false }

      copy_static
      create_tag_pages
      add_update_item_attributes
      end
%p
  Queste azioni non sono azioni standard fornite da nanoc ma sono degli helper
  scritti ad hoc in ruby. Tutto il codice che deve essere utilizzato per la
  generazione del blog può essere messo nella directory lib e verrà caricato in
  automatico da nanoc.
  %br
  Il codice che ho incluso io nella mia lib/ ad esempio è prelevato per lo più
  dai tanti esempi di blog generati con nanoc disponibili in Rete,
  consideratelo pure come opensource, copiatelo, studiatelo ed imparatevelo.
  Sicuramente è l'approccio questo che alla lunga permette di imparare. O
  almeno, vedo che con me funziona.
%p 
  Terminato il preprocess, iniziano le direttive di compilazione vere e
  proprie, dove in base all'estensione del file applico i filtri per il
  linguaggio di markup scelto, haml nel mio caso).
  %br
  L'impostazione delle rotte avviene attraverso l'utilizzo della funzione
  helper route_path che mi permette di riscrivere le url in maniera tale da
  avere un senso semantico.
  %pre
    %code{:class=>'language-ruby coderay'}
      def route_path(item)
      return item.identifier + "index.html" if item[:content_filename].nil?
      url = item[:content_filename].gsub(/^content/, '')
 
      extname = '.' + item[:extension].split('.').last
      outext = '.haml'
      if url.match(/(\.[a-zA-Z0-9]+){2}$/) # => *.html.erb, *.html.md ...
      outext = '' # remove 2nd extension
      elsif extname == ".sass"
      outext = '.css'
      else
      outext = '.html'
      end
      url.gsub!(extname, outext)
  
      if url.include?('-')
      url = url.split('-').join('/')  # /2010/01/01-some_title.html -> /2010/01/01/some_title.html
      end

      url
      end
%p
  All'interno del mio file Rules avrò quindi:
  %pre
    %code{:class=>'language-ruby coderay'}
      route '*' do
      route_path(item)
      end
%p
  Nella terza puntata vedremo come ampliare il nostro Rakefile e quali
  informazioni sono necessarie come intestazione dei nostri post.



