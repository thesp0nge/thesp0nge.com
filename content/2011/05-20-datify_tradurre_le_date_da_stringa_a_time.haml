---
created_at: 2011-05-20
excerpt: Datify è una gemma per la traduzione delle date da stringa in oggetti di tipo Time
kind: article
publish: true
lang: [it]
tags: [ruby, ruby gem, sviluppo, datify, how-to, code attack, string]
title: "Datify: tradurre le date da stringa a Time"
place: Gessate
---

%p
  %a{:href=>'http://thesp0nge.com/2011/05/19/convertitore_da_data_in_stringa_in_oggetto_time.html'}
    Ieri
  accennavo al fatto che avrei scritto una gemma per rendere agevole la
  conversione di stringhe contenenti una data nel formato 'gg-mmm-aaaa' in
  oggetti Time.
  %br
  In serata era pronta una versione 0.20 della gemma, contenente dei metodi che
  facevano il loro lavoro, tuttavia l'utilizzo era poco agevole per uno
  sviluppatore... e forse era anche troppo 
  %em
    javesco.
%p
  Le vecchie API infatti richiedevano che datify venisse usata in questo modo.
  %pre
    %code{:class=>'language-ruby coderay'}
      :escaped
        require 'datify'

        # do some code here
        my_date = Datify::Engine.new('16-giu-1976')
        puts my_date.date.to_s
%p
  Funzionava certo, però il codice non era sicuramente semplice da leggere ed
  immediato. Si poteva fare di meglio.
  %br
  La nuova API che ho rilasciato stamattina, prevede infatti l'introduzione di
  due nuovi metodi per la classe String.
  %pre
    %code{:class=>'language-ruby coderay'}
      :escaped
        require 'datify'

        if "16-giu-1976".is_time?
          puts "16-giu-1976".to_time.to_s
        end
%p
  I nuovi metodi introdotti alla classe stringa sono:
  %ul
    %li
      is_time? che restituisce true quando la stringa è la rappresentazione di
      una data nel formato 'gg-mmm-aaaa'
    %li
      to_time che restituisce un oggetto Time equivalente a quella stringa o
      nil in caso di stringa non valida
%p
  Ero indeciso se restituire nil o Time.new in caso si tenti di convertire una
  stringa qualsiasi in data senza controllare il valore di is_time?
  %br
  Restituire Time.new era sicuramente meglio per rendere datify difensiva circa
  il proprio comportamento, però non aveva molto senso in quanto se la stringa
  non è una data, non c'è ragione per cui io debba restituire una data valida.
  %br
  Diciamo che per ora ha vinto la consistenza dell'API. Alla robustezza ci deve
  pensare il programma chiamante.
