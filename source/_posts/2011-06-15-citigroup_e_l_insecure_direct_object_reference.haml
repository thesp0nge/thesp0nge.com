---
created_at: 2011-06-15 14:22:20 +0200
excerpt: Il più delle volte le persone sottovalutano il problema del mancato utilizzo di controlli mandatori su chi può fruire del contenuto di una pagina web. Le persone di Citigroup sono tra queste ma a farne le spese sono i loro clienti.
kind: article
publish: true
lang: [it]
tags: [appsec, cracking, penetration test, code review, owasp, owasp top 10, insecure direct object reference]
title: "Citigroup e l'insecure direct object reference"
place: Gessate
---

%p
  Durante i corsi di sviluppo sicuro che ho tenuto, arrivato a spiegare cosa si intendesse per 
  %a{:href=>'https://www.owasp.org/index.php/Top_10_2010-A4'}
    Insecure direct object reference
  sono sempre stato un po' imbarazzato.
%p
  E' difficile ipotizzare che veramente qualcuno, nel 2011, esponga i parametri
  delle proprie API nell'url senza implementare nel backend qualche minimo
  controllo sugli accessi.
  %br
  E' difficile eppure è quello che è successo a 
  %a{:href=>'http://consumerist.com/2011/06/how-hackers-stole-200000-citi-accounts-by-exploiting-basic-browser-vulnerability.html'}
    Citigroup
%p
  L'exploit è triviale. L'attaccante ha creato un account reale nel sistema ed
  ha enumerato tutti gli account prendendo le informazioni sensibili contenute
  in quelle pagine, semplicemente cambiando il numero di conto nell'url.
  %br
  L'articolista ha riassunto la cosa con un laconico:
  %em
    As someone who has been on the internet for a few years, this is a dead
    simple and common hack and Citi should have seen it and prevented against
    it. Seriously, this is kindergarten level stuff. Really, really stupid.
%p
  La cosa allucinante è che stiamo parlando di una banca, che non ha avuto la
  minima accortezza nell'implementare la propria web application tanto da non
  fare nemmeno un penetration test che avrebbe rivelato al volo questo
  problema.
  %br
  Ancor prima di parlare di Test Driven Development, di sviluppo sicuro, di
  code review... ma un diavolo di penetration test prima del deploy?
%p
  Al di là delle mille considerazioni che si possono fare a latere di questo
  break-in, il consiglio è quello di implementare server side una logica di
  controllo degli accessi che validi la richiesta HTTP e che mostri la pagina
  risultato solamente se l'utente ha i privilegi necessari per accedere a quei
  dati.
  %br
  Evidentemente non è una cosa molto scontata.

